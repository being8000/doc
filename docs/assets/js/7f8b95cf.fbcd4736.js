"use strict";(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[2359],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return b}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),b=i,v=p["".concat(u,".").concat(b)]||p[b]||c[b]||o;return n?r.createElement(v,a(a({ref:t},d),{},{components:n})):r.createElement(v,a({ref:t},d))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2174:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return b},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],s={},u="Continuous Integration",l={unversionedId:"guides/testing/webdriver/ci",id:"guides/testing/webdriver/ci",title:"Continuous Integration",description:"Utilizing Linux and some programs to create a fake display, it is possible to run [WebDriver] tests with",source:"@site/docs/guides/04-testing/webdriver/ci.md",sourceDirName:"guides/04-testing/webdriver",slug:"/guides/testing/webdriver/ci",permalink:"/doc/v1/guides/testing/webdriver/ci",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/guides/04-testing/webdriver/ci.md",tags:[],version:"current",lastUpdatedAt:1652462994,formattedLastUpdatedAt:"5/14/2022",frontMatter:{},sidebar:"guides",previous:{title:"WebdriverIO",permalink:"/doc/v1/guides/testing/webdriver/example/webdriverio"},next:{title:"Introduction",permalink:"/doc/v1/guides/building/introduction"}},d={},c=[],p={toc:c};function b(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"continuous-integration"},"Continuous Integration"),(0,o.kt)("p",null,"Utilizing Linux and some programs to create a fake display, it is possible to run ",(0,o.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/webdriver/"},"WebDriver")," tests with\n",(0,o.kt)("a",{parentName:"p",href:"https://crates.io/crates/tauri-driver"},(0,o.kt)("inlineCode",{parentName:"a"},"tauri-driver"))," on your CI. The following example uses the ",(0,o.kt)("a",{parentName:"p",href:"https://webdriver.io/"},"WebdriverIO")," example we ",(0,o.kt)("a",{parentName:"p",href:"example/webdriverio"},"previously built together")," and\nGitHub Actions."),(0,o.kt)("p",null,"This means the following assumptions:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The Tauri application is in the repository root and the binary builds when running ",(0,o.kt)("inlineCode",{parentName:"li"},"cargo build --release"),"."),(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("a",{parentName:"li",href:"https://webdriver.io/"},"WebDriverIO")," test runner is in the ",(0,o.kt)("inlineCode",{parentName:"li"},"webdriver/webdriverio")," directory and runs when ",(0,o.kt)("inlineCode",{parentName:"li"},"yarn test")," is used in that\ndirectory.")),(0,o.kt)("p",null,"The following is a commented GitHub Actions workflow file at ",(0,o.kt)("inlineCode",{parentName:"p"},".github/workflows/webdriver.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# run this action when the repository is pushed to\non: [ push ]\n\n# the name of our workflow\nname: WebDriver\n\njobs:\n  # a single job named test\n  test:\n    # the display name the test job\n    name: WebDriverIO Test Runner\n\n    # we want to run on the latest linux environment\n    runs-on: ubuntu-latest\n\n    # the steps our job runs **in order**\n    steps:\n      # checkout the code on the workflow runner\n      - uses: actions/checkout@v2\n\n      # install system dependencies that Tauri needs to compile on Linux.\n      # note the extra dependencies for `tauri-driver` to run which are `webkit2gtk-driver` and  `xvfb`\n      - name: Tauri dependencies\n        run: >-\n          sudo apt-get update &&\n          sudo apt-get install -y\n          libgtk-3-dev\n          libgtksourceview-3.0-dev\n          webkit2gtk-4.0\n          libappindicator3-dev\n          webkit2gtk-driver\n          xvfb\n\n      # install the latest Rust stable\n      - name: Rust stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n\n      # we run our rust tests before the webdriver tests to avoid testing a broken application\n      - name: Cargo test\n        uses: actions-rs/cargo@v1\n        with:\n          command: test\n\n      # build a release build of our application to be used during our WebdriverIO tests\n      - name: Cargo build\n        uses: actions-rs/cargo@v1\n        with:\n          command: build\n          args: --release\n\n      # install the latest stable node version at the time of writing\n      - name: Node v16\n        uses: actions/setup-node@v2\n        with:\n          node-version: 16.x\n\n      # install our Node.js dependencies with Yarn\n      - name: Yarn install\n        run: yarn install\n        working-directory: webdriver/webdriverio\n\n      # install the latest version of `tauri-driver`.\n      # note: the tauri-driver version is independent of any other Tauri versions\n      - name: Install tauri-driver\n        uses: actions-rs/cargo@v1\n        with:\n          command: install\n          args: tauri-driver\n\n      # run the WebdriverIO test suite.\n      # we run it through `xvfb-run` (the dependency we installed earlier) to have a fake\n      # display server which allows our application to run headless without any changes to the code\n      - name: WebdriverIO\n        run: xvfb-run yarn test\n        working-directory: webdriver/webdriverio\n")))}b.isMDXComponent=!0}}]);