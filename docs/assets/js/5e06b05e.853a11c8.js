(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[1965],{49629:function(e,t,n){"use strict";n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return p}});var i=n(87462),s=n(63366),r=(n(67294),n(3905)),a=n(93456),o=["components"],c={sidebar_position:2},u="Inter-Process Communication",m={unversionedId:"guides/architecture/inter-process-communication/README",id:"guides/architecture/inter-process-communication/README",title:"Inter-Process Communication",description:"Inter-Process Communication (IPC) allows isolated processes to communicate securely and is key to building more complex applications.",source:"@site/docs/guides/02-architecture/inter-process-communication/README.md",sourceDirName:"guides/02-architecture/inter-process-communication",slug:"/guides/architecture/inter-process-communication/",permalink:"/doc/v1/guides/architecture/inter-process-communication/",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/guides/02-architecture/inter-process-communication/README.md",tags:[],version:"current",lastUpdatedAt:1652551325,formattedLastUpdatedAt:"5/15/2022",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guides",previous:{title:"Process Model",permalink:"/doc/v1/guides/architecture/process-model"},next:{title:"Brownfield Pattern",permalink:"/doc/v1/guides/architecture/brownfield"}},d={},p=[{value:"Events",id:"events",level:2},{value:"Commands",id:"commands",level:2}],l={toc:p};function f(e){var t=e.components,n=(0,s.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"inter-process-communication"},"Inter-Process Communication"),(0,r.kt)("p",null,"Inter-Process Communication (IPC) allows isolated processes to communicate securely and is key to building more complex applications."),(0,r.kt)("p",null,"Tauri uses a particular style of Inter-Process Communication called ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Message_passing#Asynchronous_message_passing"},"Asynchronous Message Passing"),", where processes exchange ",(0,r.kt)("em",{parentName:"p"},"requests")," and ",(0,r.kt)("em",{parentName:"p"},"responses")," serialized using some simple data representation. Message Passing should sound familiar to anyone with web development experience, as this paradigm is used for client-server communication on the internet."),(0,r.kt)("p",null,"Message passing is a safer technique than shared memory or direct function access because the recipient is free to reject or discard requests as it sees fit. For example, if the Tauri Core process determines a request to be malicious, it simply discards the requests and never executes the corresponding function."),(0,r.kt)("p",null,"In the following, we explain Tauri's two IPC primitives - ",(0,r.kt)("inlineCode",{parentName:"p"},"Events")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Commands")," - in more detail."),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("p",null,"Events are fire-and-forget, one-way IPC messages that are best suited to communicate lifecycle events and state changes. Contrary to ",(0,r.kt)("a",{parentName:"p",href:"#commands"},"Commands")," Events can be emitted by both the Frontend ",(0,r.kt)("em",{parentName:"p"},"and")," the Tauri Core."),(0,r.kt)("figure",null,(0,r.kt)(a.Mermaid,{config:{},chart:"sequenceDiagram\n    participant F as Frontend\n    participant C as Tauri Core\n\n    C-)F: Event",mdxType:"Mermaid"}),(0,r.kt)("figcaption",null,"Figure 1-2: An event sent from the Core to the Frontend.")),(0,r.kt)("h2",{id:"commands"},"Commands"),(0,r.kt)("p",null,"Tauri also provides a ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Foreign_function_interface"},"foreign function interface"),"-like abstraction on top IPC messages",(0,r.kt)("sup",{parentName:"p",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),". The primary API, ",(0,r.kt)("inlineCode",{parentName:"p"},"invoke"),", is similar to the browsers ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," API and allows the Frontend to invoke rust functions, pass arguments, and receive data."),(0,r.kt)("p",null,"Because this mechanism uses a ",(0,r.kt)("a",{parentName:"p",href:"https://www.jsonrpc.org"},"JSON-RPC")," like protocol under the hood to serialize requests and responses, all arguments and return data must be serializable to JSON."),(0,r.kt)("figure",null,(0,r.kt)(a.Mermaid,{chart:"sequenceDiagram\n    participant F as Frontend\n    participant C as Tauri Core\n\n    F-)+C: IPC request\n    note over C: Perform computation, write to file system, etc.\n    C-)-F: Response",mdxType:"Mermaid"}),(0,r.kt)("figcaption",null,"Figure 1-3: IPC messages involved in a command invocation.")),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},"Commands still use message passing under the hood, so don't share the same security pitfalls as real FFI interfaces.",(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}f.isMDXComponent=!0},11748:function(e,t,n){var i={"./locale":89234,"./locale.js":89234};function s(e){var t=r(e);return n(t)}function r(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}s.keys=function(){return Object.keys(i)},s.resolve=r,e.exports=s,s.id=11748}}]);