"use strict";(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[1484],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,g=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},70726:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={sidebar_position:4},l="Embedding External Binaries",u={unversionedId:"guides/building/sidecar",id:"guides/building/sidecar",title:"Embedding External Binaries",description:"You may need to embed depending binaries to make your application work or prevent users from installing additional dependencies (e.g., Node.js or Python).",source:"@site/docs/guides/05-building/sidecar.md",sourceDirName:"guides/05-building",slug:"/guides/building/sidecar",permalink:"/doc/v1/guides/building/sidecar",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/guides/05-building/sidecar.md",tags:[],version:"current",lastUpdatedAt:1652462994,formattedLastUpdatedAt:"5/14/2022",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guides",previous:{title:"Reducing the App Size",permalink:"/doc/v1/guides/building/app-size"},next:{title:"Debian packages",permalink:"/doc/v1/guides/building/debian"}},p={},c=[{value:"Running the sidecar binary on JavaScript",id:"running-the-sidecar-binary-on-javascript",level:2},{value:"Running the sidecar binary on Rust",id:"running-the-sidecar-binary-on-rust",level:2},{value:"Using Node.js on a sidecar",id:"using-nodejs-on-a-sidecar",level:2}],d={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"embedding-external-binaries"},"Embedding External Binaries"),(0,i.kt)("p",null,"You may need to embed depending binaries to make your application work or prevent users from installing additional dependencies (e.g., Node.js or Python).\nWe call this binary a ",(0,i.kt)("inlineCode",{parentName:"p"},"sidecar"),"."),(0,i.kt)("p",null,"To bundle the binaries of your choice, you can add the ",(0,i.kt)("inlineCode",{parentName:"p"},"externalBin")," property to the ",(0,i.kt)("inlineCode",{parentName:"p"},"tauri > bundle")," object in your ",(0,i.kt)("inlineCode",{parentName:"p"},"tauri.conf.json"),"."),(0,i.kt)("p",null,"See more about tauri.conf.json configuration ",(0,i.kt)("a",{parentName:"p",href:"../../api/config#tauri.bundle"},"here"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"externalBin")," expects a list of strings targeting binaries either with absolute or relative paths."),(0,i.kt)("p",null,"Here is a sample to illustrate the configuration. This is not a complete ",(0,i.kt)("inlineCode",{parentName:"p"},"tauri.conf.json")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "tauri": {\n    "bundle": {\n      "externalBin": [\n        "/absolute/path/to/app",\n        "relative/path/to/binary",\n        "bin/python"\n      ]\n    },\n    "allowlist": {\n      "shell": {\n        "sidecar": true,\n        "scope": [\n          { "name": "/absolute/path/to/app", "sidecar": true },\n          { "name": "relative/path/to/binary", "sidecar": true },\n          { "name": "bin/python", "sidecar": true }\n        ]\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"A binary with the same name and a ",(0,i.kt)("inlineCode",{parentName:"p"},"-$TARGET_TRIPLE")," suffix must exist on the specified path. For instance, ",(0,i.kt)("inlineCode",{parentName:"p"},'"externalBin": ["bin/python"]')," requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"src-tauri/bin/python-x86_64-unknown-linux-gnu")," executable on Linux. You can find the current platform's target triple running the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"rustc -Vv | grep host | cut -f2 -d' '\n")),(0,i.kt)("p",null,"Here's a Node.js script to append the target triple to a binary:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const execa = require('execa')\nconst fs = require('fs')\n\nlet extension = ''\nif (process.platform === 'win32') {\n  extension = '.exe'\n}\n\nasync function main() {\n  const rustInfo = (await execa('rustc', ['-vV'])).stdout\n  const targetTriple = /host: (\\S+)/g.exec(rustInfo)[1]\n  if (!targetTriple) {\n    console.error('Failed to determine platform target triple')\n  }\n  fs.renameSync(\n    `src-tauri/binaries/app${extension}`,\n    `src-tauri/binaries/app-${targetTriple}${extension}`\n  )\n}\n\nmain().catch((e) => {\n  throw e\n})\n")),(0,i.kt)("h2",{id:"running-the-sidecar-binary-on-javascript"},"Running the sidecar binary on JavaScript"),(0,i.kt)("p",null,"On the JavaScript code, import the ",(0,i.kt)("inlineCode",{parentName:"p"},"Command")," class on the ",(0,i.kt)("inlineCode",{parentName:"p"},"shell")," module and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"sidecar")," static method."),(0,i.kt)("p",null,"Note that you must configure the allowlist to enable ",(0,i.kt)("inlineCode",{parentName:"p"},"shell > sidecar")," and configure all binaries in the shell scope."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Command } from '@tauri-apps/api/shell'\n// alternatively, use `window.__TAURI__.shell.Command`\n// `my-sidecar` is the value specified on `tauri.conf.json > tauri > bundle > externalBin`\nconst command = Command.sidecar('my-sidecar')\nconst output = await command.execute()\n")),(0,i.kt)("h2",{id:"running-the-sidecar-binary-on-rust"},"Running the sidecar binary on Rust"),(0,i.kt)("p",null,"On the Rust code, import the ",(0,i.kt)("inlineCode",{parentName:"p"},"Command")," struct from the ",(0,i.kt)("inlineCode",{parentName:"p"},"tauri::api::process")," module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let (mut rx, mut child) = Command::new_sidecar("my-sidecar")\n  .expect("failed to create `my-sidecar` binary command")\n  .spawn()\n  .expect("Failed to spawn sidecar");\n\ntauri::async_runtime::spawn(async move {\n  // read events such as stdout\n  while let Some(event) = rx.recv().await {\n    if let CommandEvent::Stdout(line) = event {\n      window\n        .emit("message", Some(format!("\'{}\'", line)))\n        .expect("failed to emit event");\n      // write to stdin\n      child.write("message from Rust\\n".as_bytes()).unwrap();\n    }\n  }\n});\n')),(0,i.kt)("p",null,"Note that you must enable the ",(0,i.kt)("strong",{parentName:"p"},"process-command-api")," Cargo feature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'# Cargo.toml\n[dependencies]\ntauri = { version = "1.0.0-rc.6", features = ["process-command-api", ...] }\n')),(0,i.kt)("h2",{id:"using-nodejs-on-a-sidecar"},"Using Node.js on a sidecar"),(0,i.kt)("p",null,"The Tauri ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tauri-apps/tauri/tree/dev/examples/sidecar"},"sidecar example")," demonstrates how to use the sidecar API to run a Node.js application on Tauri.\nIt compiles the Node.js code using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/vercel/pkg"},"pkg")," and uses the scripts above to run it."))}m.isMDXComponent=!0}}]);