"use strict";(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[6643],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),m=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},l=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=m(n),u=a,f=l["".concat(c,".").concat(u)]||l[u]||p[u]||r;return n?o.createElement(f,i(i({ref:t},d),{},{components:n})):o.createElement(f,i({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=l;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var m=2;m<r;m++)i[m]=n[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}l.displayName="MDXCreateElement"},99393:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return p}});var o=n(87462),a=n(63366),r=(n(67294),n(3905)),i=["components"],s={},c="Mocking Tauri APIs",m={unversionedId:"guides/testing/mocking",id:"guides/testing/mocking",title:"Mocking Tauri APIs",description:'When writing your frontend tests, having a "fake" Tauri environment to simulate windows or intercept IPC calls is common, so-called mocking.',source:"@site/docs/guides/04-testing/mocking.md",sourceDirName:"guides/04-testing",slug:"/guides/testing/mocking",permalink:"/doc/v1/guides/testing/mocking",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/guides/04-testing/mocking.md",tags:[],version:"current",lastUpdatedAt:1652462994,formattedLastUpdatedAt:"5/14/2022",frontMatter:{},sidebar:"guides",previous:{title:"Updating Dependencies",permalink:"/doc/v1/guides/development/updating-dependencies"},next:{title:"Introduction",permalink:"/doc/v1/guides/testing/webdriver/introduction"}},d={},p=[{value:"IPC Requests",id:"ipc-requests",level:2},{value:"Windows",id:"windows",level:2}],l={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mocking-tauri-apis"},"Mocking Tauri APIs"),(0,r.kt)("p",null,'When writing your frontend tests, having a "fake" Tauri environment to simulate windows or intercept IPC calls is common, so-called ',(0,r.kt)("em",{parentName:"p"},"mocking"),".\nThe ",(0,r.kt)("a",{parentName:"p",href:"/doc/v1/api/js/modules/mocks"},(0,r.kt)("inlineCode",{parentName:"a"},"@tauri-apps/api/mocks"))," module provides some helpful tools to make this easier for you:"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Remember to clear mocks after each test run to undo mock state changes between runs! See ",(0,r.kt)("a",{parentName:"p",href:"/doc/v1/api/js/modules/mocks#clearmocks"},(0,r.kt)("inlineCode",{parentName:"a"},"clearMocks()"))," docs for more info."))),(0,r.kt)("h2",{id:"ipc-requests"},"IPC Requests"),(0,r.kt)("p",null,"Most commonly, you want to intercept IPC requests; this can be helpful in a variety of situations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ensure the correct backend calls are made"),(0,r.kt)("li",{parentName:"ul"},"Simulate different results from backend functions")),(0,r.kt)("p",null,"Tauri provides the mockIPC function to intercept IPC requests. You can find more about the specific API in detail ",(0,r.kt)("a",{parentName:"p",href:"/doc/v1/api/js/modules/mocks#mockipc"},"here"),"."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The following examples use ",(0,r.kt)("a",{parentName:"p",href:"https://vitest.dev"},"Vitest"),", but you can use any other frontend testing library such as jest."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { beforeAll, expect, test } from "vitest";\nimport { randomFillSync } from "crypto";\n\nimport { mockIPC } from "@tauri-apps/api/mocks"\nimport { invoke } from "@tauri-apps/api/tauri";\n\n// jsdom doesn\'t come with a WebCrypto implementation\nbeforeAll(() => {\n  //@ts-ignore\n  window.crypto = {\n    getRandomValues: function (buffer) {\n      return randomFillSync(buffer);\n    },\n  };\n});\n\n\ntest("invoke simple", async () => {\n    mockIPC((cmd, args) => {\n        // simulated rust command called "add" that just adds two numbers\n        if(cmd === "add") {\n           return (args.a as number) + (args.b as number)\n        }\n    })\n\n    expect(invoke("add", { a: 12, b: 15 })).resolves.toBe(27)\n})\n')),(0,r.kt)("p",null,"Sometimes you want to track more information about an IPC call; how many times was the command invoked? Was it invoked at all?\nYou can use ",(0,r.kt)("a",{parentName:"p",href:"/doc/v1/api/js/modules/mocks#mockipc"},(0,r.kt)("inlineCode",{parentName:"a"},"mockIPC()"))," with other spying and mocking tools to test this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { beforeAll, expect, test, vi } from "vitest";\nimport { randomFillSync } from "crypto";\n\nimport { mockIPC } from "@tauri-apps/api/mocks"\nimport { invoke } from "@tauri-apps/api/tauri";\n\n// jsdom doesn\'t come with a WebCrypto implementation\nbeforeAll(() => {\n  //@ts-ignore\n  window.crypto = {\n    getRandomValues: function (buffer) {\n      return randomFillSync(buffer);\n    },\n  };\n});\n\n\ntest("invoke", async () => {\n    mockIPC((cmd, args) => {\n        // simulated rust command called "add" that just adds two numbers\n        if(cmd === "add") {\n           return (args.a as number) + (args.b as number)\n        }\n    })\n\n    // we can use the spying tools provided by vitest to track the mocked function\n    const spy = vi.spyOn(window, "__TAURI_IPC__")\n\n    expect(invoke("add", { a: 12, b: 15 })).resolves.toBe(27)\n    expect(spy).toHaveBeenCalled()\n})\n')),(0,r.kt)("h2",{id:"windows"},"Windows"),(0,r.kt)("p",null,"Sometimes you have window-specific code (a splash screen window, for example), so you need to simulate different windows.\nYou can use the ",(0,r.kt)("a",{parentName:"p",href:"/doc/v1/api/js/modules/mocks#mockwindows"},(0,r.kt)("inlineCode",{parentName:"a"},"mockWindows()")),' method to create fake window labels. The first string identifies the "current" window (i.e., the window your JavaScript believes itself in), and all other strings are treated as additional windows.'),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("a",{parentName:"p",href:"/doc/v1/api/js/modules/mocks#mockwindows"},(0,r.kt)("inlineCode",{parentName:"a"},"mockWindows()"))," only fakes the existence of windows but no window properties. To simulate window properties, you need to intercept the correct calls using ",(0,r.kt)("a",{parentName:"p",href:"/doc/v1/api/js/modules/mocks#mockipc"},(0,r.kt)("inlineCode",{parentName:"a"},"mockIPC()"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { beforeAll, expect, test } from 'vitest'\nimport { randomFillSync } from 'crypto'\n\nimport { mockWindows } from '@tauri-apps/api/mocks'\n\n// jsdom doesn't come with a WebCrypto implementation\nbeforeAll(() => {\n  //@ts-ignore\n  window.crypto = {\n    getRandomValues: function (buffer) {\n      return randomFillSync(buffer)\n    },\n  }\n})\n\ntest('invoke', async () => {\n  mockWindows('main', 'second', 'third')\n\n  const { getCurrent, getAll } = await import('@tauri-apps/api/window')\n\n  expect(getCurrent()).toHaveProperty('label', 'main')\n  expect(getAll().map((w) => w.label)).toEqual(['main', 'second', 'third'])\n})\n")))}u.isMDXComponent=!0}}]);