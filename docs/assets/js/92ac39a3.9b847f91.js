"use strict";(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[2632],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||a;return n?i.createElement(f,o(o({ref:t},u),{},{components:n})):i.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4258:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),o=["components"],l={sidebar_label:"Windows Code Signing",sidebar_position:3},p="Windows - Code signing guide locally & with Github Actions",s={unversionedId:"guides/distribution/sign-windows",id:"guides/distribution/sign-windows",title:"Windows - Code signing guide locally & with Github Actions",description:"Intro",source:"@site/docs/guides/06-distribution/sign-windows.md",sourceDirName:"guides/06-distribution",slug:"/guides/distribution/sign-windows",permalink:"/doc/v1/guides/distribution/sign-windows",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/guides/06-distribution/sign-windows.md",tags:[],version:"current",lastUpdatedAt:1652462994,formattedLastUpdatedAt:"5/14/2022",sidebarPosition:3,frontMatter:{sidebar_label:"Windows Code Signing",sidebar_position:3},sidebar:"guides",previous:{title:"Windows",permalink:"/doc/v1/guides/distribution/windows"},next:{title:"Linux",permalink:"/doc/v1/guides/distribution/linux"}},u={},c=[{value:"Intro",id:"intro",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"A. Convert your <code>.cer</code> to <code>.pfx</code>",id:"a-convert-your-cer-to-pfx",level:3},{value:"B. Import your <code>.pfx</code> file into the keystore.",id:"b-import-your-pfx-file-into-the-keystore",level:3},{value:"C. Prepare Variables",id:"c-prepare-variables",level:3},{value:"Prepare <code>tauri.conf.json</code> file",id:"prepare-tauriconfjson-file",level:2},{value:"BONUS: Sign your application with GitHub Actions.",id:"bonus-sign-your-application-with-github-actions",level:2},{value:"GitHub Secrets",id:"github-secrets",level:3},{value:"Workflow Modifications",id:"workflow-modifications",level:3}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"windows---code-signing-guide-locally--with-github-actions"},"Windows - Code signing guide locally & with Github Actions"),(0,a.kt)("h2",{id:"intro"},"Intro"),(0,a.kt)("p",null,"Code signing your application lets users know that they downloaded the official executable of your app and not some 3rd party malware that poses as your app.\nWhile it is not required, it improves users' confidence in your app."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Windows - you can likely use other platforms, but this tutorial uses Powershell native features."),(0,a.kt)("li",{parentName:"ul"},"Code signing certificate - you can acquire one of these on services such as Digicert.com, Comodo.com, & Godaddy.com. In this guide, we are using Comodo.com"),(0,a.kt)("li",{parentName:"ul"},"A working Tauri application")),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"There are a few things we have to do to get Windows prepared for code signing. This includes converting our certificate to a specific format, installing this certificate, and decoding required information from the certificate."),(0,a.kt)("h3",{id:"a-convert-your-cer-to-pfx"},"A. Convert your ",(0,a.kt)("inlineCode",{parentName:"h3"},".cer")," to ",(0,a.kt)("inlineCode",{parentName:"h3"},".pfx")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"You will need the following:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"certificate file (mine is ",(0,a.kt)("inlineCode",{parentName:"li"},"cert.cer"),")"),(0,a.kt)("li",{parentName:"ul"},"private key file (mine is ",(0,a.kt)("inlineCode",{parentName:"li"},"private-key.key"),")"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Open up a command prompt and change to your current directory using ",(0,a.kt)("inlineCode",{parentName:"p"},"cd Documents/Certs"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Convert your ",(0,a.kt)("inlineCode",{parentName:"p"},".cer")," to a ",(0,a.kt)("inlineCode",{parentName:"p"},".pfx")," using ",(0,a.kt)("inlineCode",{parentName:"p"},"openssl pkcs12 -export -in cert.cer -inkey private-key.key -out certificate.pfx"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"You should be prompted to enter an export password ",(0,a.kt)("strong",{parentName:"p"},"DON'T FORGET IT!")))),(0,a.kt)("h3",{id:"b-import-your-pfx-file-into-the-keystore"},"B. Import your ",(0,a.kt)("inlineCode",{parentName:"h3"},".pfx")," file into the keystore."),(0,a.kt)("p",null,"We now need to import our ",(0,a.kt)("inlineCode",{parentName:"p"},".pfx")," file."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Assign your export password to a variable using ",(0,a.kt)("inlineCode",{parentName:"p"},"$WINDOWS_PFX_PASSWORD = 'MYPASSWORD'"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Now Import the certificate using ",(0,a.kt)("inlineCode",{parentName:"p"},"Import-PfxCertificate -FilePath Certs/certificate.pfx -CertStoreLocation Cert:\\CurrentUser\\My -Password (ConvertTo-SecureString -String $env:WINDOWS_PFX_PASSWORD -Force -AsPlainText)")))),(0,a.kt)("h3",{id:"c-prepare-variables"},"C. Prepare Variables"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"We need the SHA-1 thumbprint of the certificate; you can get this using ",(0,a.kt)("inlineCode",{parentName:"li"},"openssl pkcs12 -info -in certificate.pfx")," and look under for following")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Bag Attributes\n    localKeyID: A1 B1 A2 B2 A3 B3 A4 B4 A5 B5 A6 B6 A7 B7 A8 B8 A9 B9 A0 B0\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"You will capture the ",(0,a.kt)("inlineCode",{parentName:"p"},"localKeyID")," but with no spaces, in this example it would be ",(0,a.kt)("inlineCode",{parentName:"p"},"A1B1A2B2A3B3A4B4A5B5A6B6A7B7A8B8A9B9A0B0"),". This is our ",(0,a.kt)("inlineCode",{parentName:"p"},"certificateThumbprint"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"We need the SHA digest algorithm used for your certificate (Hint: this is likely ",(0,a.kt)("inlineCode",{parentName:"p"},"sha256"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"We also need a timestamp URL; this is a time server used to verify the time of the certificate signing. I'm using ",(0,a.kt)("inlineCode",{parentName:"p"},"http://timestamp.comodoca.com"),", but whomever you got your certificate from likely has one as well."))),(0,a.kt)("h2",{id:"prepare-tauriconfjson-file"},"Prepare ",(0,a.kt)("inlineCode",{parentName:"h2"},"tauri.conf.json")," file"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Now that we have our ",(0,a.kt)("inlineCode",{parentName:"p"},"certificateThumbprint"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"digestAlgorithm"),", & ",(0,a.kt)("inlineCode",{parentName:"p"},"timestampUrl")," we will open up the ",(0,a.kt)("inlineCode",{parentName:"p"},"tauri.conf.json"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"tauri.conf.json")," you will look for the ",(0,a.kt)("inlineCode",{parentName:"p"},"tauri")," -> ",(0,a.kt)("inlineCode",{parentName:"p"},"bundle")," -> ",(0,a.kt)("inlineCode",{parentName:"p"},"windows")," section. You see, there are three variables for the information we have captured. Fill it out like below."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"windows": {\n        "certificateThumbprint": "A1B1A2B2A3B3A4B4A5B5A6B6A7B7A8B8A9B9A0B0",\n        "digestAlgorithm": "sha256",\n        "timestampUrl": "http://timestamp.comodoca.com"\n}\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Save and run ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn | yarn build"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the console output, you should see the following output."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'info: signing app\ninfo: running signtool "C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\bin\\\\10.0.19041.0\\\\x64\\\\signtool.exe"\ninfo: "Done Adding Additional Store\\r\\nSuccessfully signed: APPLICATION FILE PATH HERE\n')),(0,a.kt)("p",null,"Which shows you have successfully signed the ",(0,a.kt)("inlineCode",{parentName:"p"},".exe"),"."),(0,a.kt)("p",null,"And that's it! You have successfully signed your .exe file."),(0,a.kt)("h2",{id:"bonus-sign-your-application-with-github-actions"},"BONUS: Sign your application with GitHub Actions."),(0,a.kt)("p",null,"We can also create a workflow to sign the application with GitHub actions."),(0,a.kt)("h3",{id:"github-secrets"},"GitHub Secrets"),(0,a.kt)("p",null,"We need to add a few GitHub secrets for the proper configuration of the GitHub Action. These can be named however you would like."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can view ",(0,a.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/reference/encrypted-secrets"},"this")," guide for how to add GitHub secrets.")),(0,a.kt)("p",null,"The secrets we used are as follows"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},"GitHub Secrets"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Value for Variable"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"WINDOWS_CERTIFICATE"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Base64 encoded version of your .pfx certificate, can be done using this command ",(0,a.kt)("inlineCode",{parentName:"td"},"certutil -encode certificate.pfx base64cert.txt"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"WINDOWS_CERTIFICATE_PASSWORD"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Certificate export password used on creation of certificate .pfx")))),(0,a.kt)("h3",{id:"workflow-modifications"},"Workflow Modifications"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"We need to add a step in the workflow to import the certificate into the Windows environment. This workflow accomplishes the following"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Assign GitHub secrets to environment variables"),(0,a.kt)("li",{parentName:"ol"},"Create a new ",(0,a.kt)("inlineCode",{parentName:"li"},"certificate")," directory"),(0,a.kt)("li",{parentName:"ol"},"Import ",(0,a.kt)("inlineCode",{parentName:"li"},"WINDOWS_CERTIFICATE")," into tempCert.txt"),(0,a.kt)("li",{parentName:"ol"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"certutil")," to decode the tempCert.txt from base64 into a ",(0,a.kt)("inlineCode",{parentName:"li"},".pfx")," file."),(0,a.kt)("li",{parentName:"ol"},"Remove tempCert.txt"),(0,a.kt)("li",{parentName:"ol"},"Import the ",(0,a.kt)("inlineCode",{parentName:"li"},".pfx")," file into the Cert store of Windows & convert the ",(0,a.kt)("inlineCode",{parentName:"li"},"WINDOWS_CERTIFICATE_PASSWORD")," to a secure string to be used in the import command."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"We be using the ",(0,a.kt)("inlineCode",{parentName:"p"},"tauri-action")," publish template available ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tauri-apps/tauri-action"},"here"),"."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'name: "publish"\non:\n  push:\n    branches:\n      - release\n\njobs:\n  publish-tauri:\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.platform }}\n    steps:\n    - uses: actions/checkout@v2\n    - name: setup node\n      uses: actions/setup-node@v1\n      with:\n        node-version: 12\n    - name: install Rust stable\n      uses: actions-rs/toolchain@v1\n      with:\n        toolchain: stable\n    - name: install webkit2gtk (ubuntu only)\n      if: matrix.platform == \'ubuntu-latest\'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y webkit2gtk-4.0\n    - name: install app dependencies and build it\n      run: yarn && yarn build\n    - uses: tauri-apps/tauri-action@v0\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        tagName: app-v__VERSION__ # the action automatically replaces \\_\\_VERSION\\_\\_ with the app version\n        releaseName: "App v__VERSION__"\n        releaseBody: "See the assets to download this version and install."\n        releaseDraft: true\n        prerelease: false\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Right above ",(0,a.kt)("inlineCode",{parentName:"li"},"-name: install app dependencies and build it")," you will want to add the following step")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    - name: import windows certificate\n      if: matrix.platform == 'windows-latest'\n      env:\n        WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}\n        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}\n      run: |\n        New-Item -ItemType directory -Path certificate\n        Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE\n        certutil -decode certificate/tempCert.txt certificate/certificate.pfx\n        Remove-Item -path certificate -include tempCert.txt\n        Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\\CurrentUser\\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Save and push to your repo.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Your workflow can now import your windows certificate and import it into the GitHub runner, allowing for automated code-signing!"))))}m.isMDXComponent=!0}}]);