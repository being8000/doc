"use strict";(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[2033],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),c=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,g=m["".concat(u,".").concat(d)]||m[d]||p[d]||i;return n?a.createElement(g,o(o({ref:t},l),{},{components:n})):a.createElement(g,o({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},77971:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],s={},u="Making Your Own CLI",c={unversionedId:"guides/features/cli",id:"guides/features/cli",title:"Making Your Own CLI",description:"Tauri enables your app to have a CLI through [clap], a robust command line argument parser. With a simple CLI definition in your tauri.conf.json file, you can define your interface and read its argument matches map on JavaScript and/or Rust.",source:"@site/docs/guides/07-features/cli.md",sourceDirName:"guides/07-features",slug:"/guides/features/cli",permalink:"/doc/v1/guides/features/cli",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/guides/07-features/cli.md",tags:[],version:"current",lastUpdatedAt:1652462994,formattedLastUpdatedAt:"5/14/2022",frontMatter:{},sidebar:"guides",previous:{title:"Updater",permalink:"/doc/v1/guides/distribution/updater"},next:{title:"Calling Rust from the frontend",permalink:"/doc/v1/guides/features/command"}},l={},p=[{value:"Base Configuration",id:"base-configuration",level:2},{value:"Adding Arguments",id:"adding-arguments",level:2},{value:"Positional Arguments",id:"positional-arguments",level:3},{value:"Named Arguments",id:"named-arguments",level:3},{value:"Flag Arguments",id:"flag-arguments",level:3},{value:"Subcommands",id:"subcommands",level:2},{value:"Reading the matches",id:"reading-the-matches",level:2},{value:"Rust",id:"rust",level:3},{value:"JavaScript",id:"javascript",level:3},{value:"Complete documentation",id:"complete-documentation",level:2}],m={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"making-your-own-cli"},"Making Your Own CLI"),(0,i.kt)("p",null,"Tauri enables your app to have a CLI through ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/clap-rs/clap"},"clap"),", a robust command line argument parser. With a simple CLI definition in your ",(0,i.kt)("inlineCode",{parentName:"p"},"tauri.conf.json")," file, you can define your interface and read its argument matches map on JavaScript and/or Rust."),(0,i.kt)("h2",{id:"base-configuration"},"Base Configuration"),(0,i.kt)("p",null,"Under ",(0,i.kt)("inlineCode",{parentName:"p"},"tauri.conf.json"),", you have the following structure to configure the interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src-tauri/tauri.conf.json",title:"src-tauri/tauri.conf.json"},'{\n  "tauri": {\n    "cli": {\n      "description": "", // command description that\'s shown on help\n      "longDescription": "", // command long description that\'s shown on help\n      "beforeHelp": "", // content to show before the help text\n      "afterHelp": "", // content to show after the help text\n      "args": [], // list of arguments of the command, we\'ll explain it later\n      "subcommands": {\n        "subcommand-name": {\n          // configures a subcommand that is accessible\n          // with `./app subcommand-name --arg1 --arg2 --etc`\n          // configuration as above, with "description", "args", etc.\n        }\n      }\n    }\n  }\n}\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All JSON configurations here are just samples, many other fields have been omitted for the sake of clarity."))),(0,i.kt)("h2",{id:"adding-arguments"},"Adding Arguments"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," array represents the list of arguments accepted by its command or subcommand. You can find more details about the way to configure them ",(0,i.kt)("a",{parentName:"p",href:"../../api/config#tauri"},"here"),"."),(0,i.kt)("h3",{id:"positional-arguments"},"Positional Arguments"),(0,i.kt)("p",null,"A positional argument is identified by its position in the list of arguments. With the following configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=src-tauri/tauri.conf.json:tauri.cli",title:"src-tauri/tauri.conf.json:tauri.cli"},'{\n  "args": [\n    {\n      "name": "source",\n      "index": 1,\n      "takesValue": true\n    },\n    {\n      "name": "destination",\n      "index": 2,\n      "takesValue": true\n    }\n  ]\n}\n')),(0,i.kt)("p",null,"Users can run your app as ",(0,i.kt)("inlineCode",{parentName:"p"},"./app tauri.txt dest.txt")," and the arg matches map will define ",(0,i.kt)("inlineCode",{parentName:"p"},"source")," as ",(0,i.kt)("inlineCode",{parentName:"p"},'"tauri.txt"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},"destination")," as ",(0,i.kt)("inlineCode",{parentName:"p"},'"dest.txt"'),"."),(0,i.kt)("h3",{id:"named-arguments"},"Named Arguments"),(0,i.kt)("p",null,"A named argument is a (key, value) pair where the key identifies the value. With the following configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=src-tauri/tauri.conf.json:tauri.cli",title:"src-tauri/tauri.conf.json:tauri.cli"},'{\n  "args": [\n    {\n      "name": "type",\n      "short": "t",\n      "takesValue": true,\n      "multiple": true,\n      "possibleValues": ["foo", "bar"]\n    }\n  ]\n}\n')),(0,i.kt)("p",null,"Users can run your app as ",(0,i.kt)("inlineCode",{parentName:"p"},"./app --type foo bar"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"./app -t foo -t bar")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"./app --type=foo,bar")," and the arg matches map will define ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," as ",(0,i.kt)("inlineCode",{parentName:"p"},'["foo", "bar"]'),"."),(0,i.kt)("h3",{id:"flag-arguments"},"Flag Arguments"),(0,i.kt)("p",null,"A flag argument is a standalone key whose presence or absence provides information to your application. With the following configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src-tauri/tauri.conf.json:tauri.cli",title:"src-tauri/tauri.conf.json:tauri.cli"},'{\n  "args": [\n    "name": "verbose",\n    "short": "v",\n    "multipleOccurrences": true\n  ]\n}\n')),(0,i.kt)("p",null,"Users can run your app as ",(0,i.kt)("inlineCode",{parentName:"p"},"./app -v -v -v"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"./app --verbose --verbose --verbose")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"./app -vvv")," and the arg matches map will define ",(0,i.kt)("inlineCode",{parentName:"p"},"verbose")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", with ",(0,i.kt)("inlineCode",{parentName:"p"},"occurrences = 3"),"."),(0,i.kt)("h2",{id:"subcommands"},"Subcommands"),(0,i.kt)("p",null,"Some CLI applications has additional interfaces as subcommands. For instance, the ",(0,i.kt)("inlineCode",{parentName:"p"},"git")," CLI has ",(0,i.kt)("inlineCode",{parentName:"p"},"git branch"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"git commit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"git push"),". You can define additional nested interfaces with the ",(0,i.kt)("inlineCode",{parentName:"p"},"subcommands")," array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src-tauri/tauri.conf.json:tauri",title:"src-tauri/tauri.conf.json:tauri"},'{\n  "cli": {\n    ...\n    "subcommands": {\n      "branch": {\n        "args": []\n      },\n      "push": {\n        "args": []\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Its configuration is the same as the root application configuration, with the ",(0,i.kt)("inlineCode",{parentName:"p"},"description"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"longDescription"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"args"),", etc."),(0,i.kt)("h2",{id:"reading-the-matches"},"Reading the matches"),(0,i.kt)("h3",{id:"rust"},"Rust"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use tauri::api::cli::get_matches;\n\nfn main() {\n  let context = tauri::generate_context!();\n  let cli_config = context.config().tauri.cli.clone().unwrap();\n\n  match get_matches(&cli_config) {\n    // `matches` here is a Struct with { args, subcommand }.\n    // `args` is `HashMap<String, ArgData>` where `ArgData` is a struct with { value, occurances }.\n    // `subcommand` is `Option<Box<SubcommandMatches>>` where `SubcommandMatches` is a struct with { name, matches }.\n    Ok(matches) => {\n      println!("{:?}", matches)\n    }\n    Err(_) => {}\n  };\n\n  tauri::Builder::default()\n  .run(context)\n  .expect("error while running tauri application");\n}\n')),(0,i.kt)("h3",{id:"javascript"},"JavaScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { getMatches } from '@tauri-apps/api/cli'\n\ngetMatches().then((matches) => {\n  // do something with the { args, subcommand } matches\n})\n")),(0,i.kt)("h2",{id:"complete-documentation"},"Complete documentation"),(0,i.kt)("p",null,"You can find more about the CLI configuration ",(0,i.kt)("a",{parentName:"p",href:"../../api/config#tauri"},"here"),"."))}d.isMDXComponent=!0}}]);