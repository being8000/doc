(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[7643],{12535:function(e,t,s){"use strict";s.r(t),s.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return d}});var o=s(87462),r=s(63366),i=(s(67294),s(3905)),n=s(93456),a=["components"],c={sidebar_position:1},l="Process Model",p={unversionedId:"guides/architecture/process-model",id:"guides/architecture/process-model",title:"Process Model",description:"Tauri employs a multi-process architecture similar to Electron or many modern web browsers. This guide explores the reasons behind the design choice and why it is key to writing secure applications.",source:"@site/docs/guides/02-architecture/process-model.md",sourceDirName:"guides/02-architecture",slug:"/guides/architecture/process-model",permalink:"/doc/v1/guides/architecture/process-model",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/guides/02-architecture/process-model.md",tags:[],version:"current",lastUpdatedAt:1652462994,formattedLastUpdatedAt:"5/14/2022",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"guides",previous:{title:"Architecture",permalink:"/doc/v1/guides/architecture/"},next:{title:"Inter-Process Communication",permalink:"/doc/v1/guides/architecture/inter-process-communication/"}},u={},d=[{value:"Why Multiple Processes?",id:"why-multiple-processes",level:2},{value:"The Core Process",id:"the-core-process",level:2},{value:"The WebView Process",id:"the-webview-process",level:2}],h={toc:d};function m(e){var t=e.components,s=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"process-model"},"Process Model"),(0,i.kt)("p",null,"Tauri employs a multi-process architecture similar to Electron or many modern web browsers. This guide explores the reasons behind the design choice and why it is key to writing secure applications."),(0,i.kt)("h2",{id:"why-multiple-processes"},"Why Multiple Processes?"),(0,i.kt)("p",null,"In the early days of GUI applications, it was common to use a single process to perform computation, draw the interface and react to user input. As you can probably guess, this meant that a long-running, expensive computation would leave the user interface unresponsive, or worse, a failure in one app component would bring the whole app crashing down."),(0,i.kt)("p",null,"It became clear that a more resilient architecture was needed, and applications began running different components in different processes. This makes much better use of modern multi-core CPUs and creates far safer applications. A crash in one component doesn't affect the whole system anymore, as components are isolated on different processes. If a process gets into an invalid state, we can easily restart it."),(0,i.kt)("p",null,"We can also limit the blast radius of potential exploits by handing out only the minimum amount of permissions to each process, just enough so they can get their job done. This pattern is known as the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Principle_of_least_privilege"},"Principle of Least Privilege"),", and you see it in the real world all the time. If you have a gardener coming over to trim your hedge, you give them the key to your garden. You would ",(0,i.kt)("strong",{parentName:"p"},"not")," give them the keys to your house; why would they need access to that? The same concept applies to computer programs. The less access we give them, the less harm they can do if they get compromised."),(0,i.kt)("h2",{id:"the-core-process"},"The Core Process"),(0,i.kt)("p",null,"Each Tauri application has a core process, which acts as the application's entry point and which is the only component with full access to the operating system."),(0,i.kt)("p",null,"The Core's primary responsibility is to use that access to create and orchestrate application windows, system-tray menus, or notifications. Tauri implements the necessary cross-platform abstractions to make this easy. It also routes all ",(0,i.kt)("a",{parentName:"p",href:"inter-process-communication"},"Inter-Process Communication")," through the Core process, allowing you to intercept, filter, and manipulate IPC messages in one central place."),(0,i.kt)("p",null,"The Core process should also be responsible for managing global state, such as settings or database connections. This allows you to easily synchronize state between windows and protect your business-sensitive data from prying eyes in the Frontend."),(0,i.kt)("p",null,"We chose Rust to implement Tauri because its concept of ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html"},"Ownership"),"\nguarantees memory safety while retaining excellent performance."),(0,i.kt)("figure",null,(0,i.kt)(n.Mermaid,{config:{},chart:"flowchart TD\n    C{Core}\n    W1[WebView]\n    W2[WebView]\n    W3[WebView]\n\n    C <--\x3e|Events & Commands| W1\n    C <--\x3e|Events & Commands| W2\n    C <--\x3e|Events & Commands| W3",mdxType:"Mermaid"}),(0,i.kt)("figcaption",null,"Figure 1-1: Simplified representation of the Tauri process model. A single Core process manages one or more WebView processes.")),(0,i.kt)("h2",{id:"the-webview-process"},"The WebView Process"),(0,i.kt)("p",null,"The Core process doesn't render the actual user interface (UI) itself; it spins up WebView processes that leverage WebView libraries provided by the operating system. A WebView is a browser-like environment that executes your HTML, CSS, and JavaScript."),(0,i.kt)("p",null,"This means that most of your techniques and tools used in traditional web development can be used to create Tauri applications. For example, many Tauri examples are written using the ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/"},"Svelte")," frontend framework and the ",(0,i.kt)("a",{parentName:"p",href:"https://vitejs.dev/"},"Vite")," bundler."),(0,i.kt)("p",null,"Security best practices apply as well; for example, you must always sanitize user input, never handle secrets in the Frontend and ideally defer as much business logic to the Core process as possible to keep your attack surface small."),(0,i.kt)("p",null,"Contrary to other similar solutions, the WebView libraries are ",(0,i.kt)("strong",{parentName:"p"},"not")," included in your final executable but dynamically linked at runtime",(0,i.kt)("sup",{parentName:"p",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),". This makes your application ",(0,i.kt)("em",{parentName:"p"},"significantly")," smaller, but it also means that you need to keep platform differences in mind, just like traditional web development."),(0,i.kt)("div",{className:"footnotes"},(0,i.kt)("hr",{parentName:"div"}),(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol",id:"fn-1"},"Currently, Tauri uses ",(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/microsoft-edge/webview2/"},"Microsoft Edge WebView2")," on Windows, ",(0,i.kt)("a",{parentName:"li",href:"https://developer.apple.com/documentation/webkit/wkwebview"},"WKWebView")," on\nmacOS and ",(0,i.kt)("a",{parentName:"li",href:"https://webkitgtk.org"},"webkitgtk")," on Linux.",(0,i.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0},11748:function(e,t,s){var o={"./locale":89234,"./locale.js":89234};function r(e){var t=i(e);return s(t)}function i(e){if(!s.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}r.keys=function(){return Object.keys(o)},r.resolve=i,e.exports=r,r.id=11748}}]);