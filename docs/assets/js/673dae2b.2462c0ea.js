"use strict";(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[2755],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return p}});var i=t(67294);function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){u(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,u=function(e,n){if(null==e)return{};var t,i,u={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(u[t]=e[t]);return u}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(u[t]=e[t])}return u}var l=i.createContext({}),s=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=s(e.components);return i.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,u=e.mdxType,a=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=s(t),p=u,w=c["".concat(l,".").concat(p)]||c[p]||d[p]||a;return t?i.createElement(w,r(r({ref:n},m),{},{components:t})):i.createElement(w,r({ref:n},m))}));function p(e,n){var t=arguments,u=n&&n.mdxType;if("string"==typeof e||u){var a=t.length,r=new Array(a);r[0]=c;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:u,r[1]=o;for(var s=2;s<a;s++)r[s]=t[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5906:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return d}});var i=t(87462),u=t(63366),a=(t(67294),t(3905)),r=["components"],o={},l="Window Menu",s={unversionedId:"guides/features/menu",id:"guides/features/menu",title:"Window Menu",description:"Native application menus can be attached to a window.",source:"@site/docs/guides/07-features/menu.md",sourceDirName:"guides/07-features",slug:"/guides/features/menu",permalink:"/doc/v1/guides/features/menu",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/guides/07-features/menu.md",tags:[],version:"current",lastUpdatedAt:1652462994,formattedLastUpdatedAt:"5/14/2022",frontMatter:{},sidebar:"guides",previous:{title:"Icons",permalink:"/doc/v1/guides/features/icons"},next:{title:"Multiwindow",permalink:"/doc/v1/guides/features/multiwindow"}},m={},d=[{value:"Creating a menu",id:"creating-a-menu",level:3},{value:"Adding the menu to all windows",id:"adding-the-menu-to-all-windows",level:3},{value:"Adding the menu to a specific window",id:"adding-the-menu-to-a-specific-window",level:3},{value:"Listening to events on custom menu items",id:"listening-to-events-on-custom-menu-items",level:3},{value:"Listening to events on global menus",id:"listening-to-events-on-global-menus",level:4},{value:"Listening to events on window menus",id:"listening-to-events-on-window-menus",level:4},{value:"Updating menu items",id:"updating-menu-items",level:3}],c={toc:d};function p(e){var n=e.components,t=(0,u.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"window-menu"},"Window Menu"),(0,a.kt)("p",null,"Native application menus can be attached to a window."),(0,a.kt)("h3",{id:"creating-a-menu"},"Creating a menu"),(0,a.kt)("p",null,"To create a native window menu, import the ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Submenu"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"MenuItem")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomMenuItem")," types.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"MenuItem")," enum contains a collection of platform-specific items (currently not implemented on Windows).\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomMenuItem")," allows you to create your own menu items and add special functionality to them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use tauri::{CustomMenuItem, Menu, MenuItem, Submenu};\n")),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu")," instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// here `"quit".to_string()` defines the menu item id, and the second parameter is the menu item label.\nlet quit = CustomMenuItem::new("quit".to_string(), "Quit");\nlet close = CustomMenuItem::new("close".to_string(), "Close");\nlet submenu = Submenu::new("File", Menu::new().add_item(quit).add_item(close));\nlet menu = Menu::new()\n  .add_native_item(MenuItem::Copy)\n  .add_item(CustomMenuItem::new("hide", "Hide"))\n  .add_submenu(submenu);\n')),(0,a.kt)("h3",{id:"adding-the-menu-to-all-windows"},"Adding the menu to all windows"),(0,a.kt)("p",null,"The defined menu can be set to all windows using the ",(0,a.kt)("inlineCode",{parentName:"p"},"menu")," API on the ",(0,a.kt)("inlineCode",{parentName:"p"},"tauri::Builder")," struct:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, Menu, MenuItem, Submenu};\n\nfn main() {\n  let menu = Menu::new(); // configure the menu\n  tauri::Builder::default()\n    .menu(menu)\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),(0,a.kt)("h3",{id:"adding-the-menu-to-a-specific-window"},"Adding the menu to a specific window"),(0,a.kt)("p",null,"You can create a window and set the menu to be used. This allows defining a specific menu set for each application window."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, Menu, MenuItem, Submenu};\nuse tauri::WindowBuilder;\n\nfn main() {\n  let menu = Menu::new(); // configure the menu\n  tauri::Builder::default()\n    .create_window(\n      "main-window".to_string(),\n      tauri::WindowUrl::App("index.html".into()),\n      move |window_builder, webview_attributes| {\n        (window_builder.menu(menu), webview_attributes)\n      },\n    )\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),(0,a.kt)("h3",{id:"listening-to-events-on-custom-menu-items"},"Listening to events on custom menu items"),(0,a.kt)("p",null,"Each ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomMenuItem")," triggers an event when clicked. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"on_menu_event")," API to handle them, either on the global ",(0,a.kt)("inlineCode",{parentName:"p"},"tauri::Builder")," or on an specific window."),(0,a.kt)("h4",{id:"listening-to-events-on-global-menus"},"Listening to events on global menus"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, Menu, MenuItem};\n\nfn main() {\n  let menu = vec![]; // insert the menu array here\n  tauri::Builder::default()\n    .menu(menu)\n    .on_menu_event(|event| {\n      match event.menu_item_id() {\n        "quit" => {\n          std::process::exit(0);\n        }\n        "close" => {\n          event.window().close().unwrap();\n        }\n        _ => {}\n      }\n    })\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),(0,a.kt)("h4",{id:"listening-to-events-on-window-menus"},"Listening to events on window menus"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, Menu, MenuItem};\nuse tauri::{Manager, WindowBuilder};\n\nfn main() {\n  let menu = vec![]; // insert the menu array here\n  tauri::Builder::default()\n    .create_window(\n      "main-window".to_string(),\n      tauri::WindowUrl::App("index.html".into()),\n      move |window_builder, webview_attributes| {\n        (window_builder.menu(menu), webview_attributes)\n      },\n    )\n    .setup(|app| {\n      let window = app.get_window("main-window").unwrap();\n      let window_ = window.clone();\n      window.on_menu_event(move |event| {\n        match event.menu_item_id() {\n          "quit" => {\n            std::process::exit(0);\n          }\n          "close" => {\n            window_.close().unwrap();\n          }\n          _ => {}\n        }\n      });\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),(0,a.kt)("h3",{id:"updating-menu-items"},"Updating menu items"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Window")," struct has a ",(0,a.kt)("inlineCode",{parentName:"p"},"menu_handle")," method, which allows updating menu items:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n  tauri::Builder::default()\n    .setup(|app| {\n      let main_window = app.get_window("main").unwrap();\n      let menu_handle = main_window.menu_handle();\n      std::thread::spawn(move || {\n        // you can also `set_selected`, `set_enabled` and `set_native_image` (macOS only).\n        menu_handle.get_item("item_id").set_title("New title");\n      })\n      Ok(())\n    })\n}\n')))}p.isMDXComponent=!0}}]);