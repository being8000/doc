"use strict";(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[9197],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),f=a,h=d["".concat(u,".").concat(f)]||d[f]||c[f]||i;return t?r.createElement(h,o(o({ref:n},p),{},{components:t})):r.createElement(h,o({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6869:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={},u="Splashscreen",l={unversionedId:"guides/features/splashscreen",id:"guides/features/splashscreen",title:"Splashscreen",description:"If your webpage could take some time to load, or if you need to run an initialization procedure in Rust before displaying your main window, a splashscreen could improve the loading experience for the user.",source:"@site/docs/guides/07-features/splashscreen.md",sourceDirName:"guides/07-features",slug:"/guides/features/splashscreen",permalink:"/doc/v1/guides/features/splashscreen",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/guides/07-features/splashscreen.md",tags:[],version:"current",lastUpdatedAt:1652462994,formattedLastUpdatedAt:"5/14/2022",frontMatter:{},sidebar:"guides",previous:{title:"Tauri Plugins",permalink:"/doc/v1/guides/features/plugin"},next:{title:"System Tray",permalink:"/doc/v1/guides/features/system-tray"}},p={},c=[{value:"Setup",id:"setup",level:3},{value:"Waiting for Webpage",id:"waiting-for-webpage",level:3},{value:"Waiting for Rust",id:"waiting-for-rust",level:3}],d={toc:c};function f(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"splashscreen"},"Splashscreen"),(0,i.kt)("p",null,"If your webpage could take some time to load, or if you need to run an initialization procedure in Rust before displaying your main window, a splashscreen could improve the loading experience for the user."),(0,i.kt)("h3",{id:"setup"},"Setup"),(0,i.kt)("p",null,"First, create a ",(0,i.kt)("inlineCode",{parentName:"p"},"splashscreen.html")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"distDir")," that contains the HTML code for a splashscreen. Then, update your ",(0,i.kt)("inlineCode",{parentName:"p"},"tauri.conf.json")," like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},'"windows": [\n  {\n    "title": "Tauri App",\n    "width": 800,\n    "height": 600,\n    "resizable": true,\n    "fullscreen": false,\n+   "visible": false // Hide the main window by default\n  },\n  // Add the splashscreen window\n+ {\n+   "width": 400,\n+   "height": 200,\n+   "decorations": false,\n+   "url": "splashscreen.html",\n+   "label": "splashscreen"\n+ }\n]\n')),(0,i.kt)("p",null,"Now, your main window will be hidden and the splashscreen window will show when your app is launched. Next, you'll need a way to close the splashscreen and show the main window when your app is ready. How you do this depends on what you are waiting for before closing the splashscreen."),(0,i.kt)("h3",{id:"waiting-for-webpage"},"Waiting for Webpage"),(0,i.kt)("p",null,"If you are waiting for your web code, you'll want to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"close_splashscreen")," ",(0,i.kt)("a",{parentName:"p",href:"/doc/v1/guides/features/command"},"command"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src-tauri/main.rs",title:"src-tauri/main.rs"},'use tauri::Manager;\n// Create the command:\n// This command must be async so that it doesn\'t run on the main thread.\n#[tauri::command]\nasync fn close_splashscreen(window: tauri::Window) {\n  // Close splashscreen\n  if let Some(splashscreen) = window.get_window("splashscreen") {\n    splashscreen.close().unwrap();\n  }\n  // Show main window\n  window.get_window("main").unwrap().show().unwrap();\n}\n\n// Register the command:\nfn main() {\n  tauri::Builder::default()\n    // Add this line\n    .invoke_handler(tauri::generate_handler![close_splashscreen])\n    .run(tauri::generate_context!())\n    .expect("failed to run app");\n}\n\n')),(0,i.kt)("p",null,"Then, you can call it from your JS:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// With the Tauri API npm package:\nimport { invoke } from '@tauri-apps/api/tauri'\n// With the Tauri global script:\nconst invoke = window.__TAURI__.invoke\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // This will wait for the window to load, but you could\n  // run this function on whatever trigger you want\n  invoke('close_splashscreen')\n})\n")),(0,i.kt)("h3",{id:"waiting-for-rust"},"Waiting for Rust"),(0,i.kt)("p",null,"If you are waiting for Rust code to run, put it in the ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," function handler so you have access to the ",(0,i.kt)("inlineCode",{parentName:"p"},"App")," instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src-tauri/main.rs",title:"src-tauri/main.rs"},'use tauri::Manager;\nfn main() {\n  tauri::Builder::default()\n    .setup(|app| {\n      let splashscreen_window = app.get_window("splashscreen").unwrap();\n      let main_window = app.get_window("main").unwrap();\n      // we perform the initialization code on a new task so the app doesn\'t freeze\n      tauri::async_runtime::spawn(async move {\n        // initialize your app here instead of sleeping :)\n        println!("Initializing...");\n        std::thread::sleep(std::time::Duration::from_secs(2));\n        println!("Done initializing.");\n\n        // After it\'s done, close the splashscreen and display the main window\n        splashscreen_window.close().unwrap();\n        main_window.show().unwrap();\n      });\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .expect("failed to run app");\n}\n')))}f.isMDXComponent=!0}}]);