"use strict";(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[7851],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=i.createContext({}),s=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(t),g=a,m=d["".concat(u,".").concat(g)]||d[g]||c[g]||l;return t?i.createElement(m,r(r({ref:n},p),{},{components:t})):i.createElement(m,r({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var s=2;s<l;s++)r[s]=t[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2838:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var i=t(87462),a=t(63366),l=(t(67294),t(3905)),r=["components"],o={},u="Tauri Plugins",s={unversionedId:"guides/features/plugin",id:"guides/features/plugin",title:"Tauri Plugins",description:"Plugins allow you to hook into the Tauri application lifecycle and introduce new commands.",source:"@site/docs/guides/07-features/plugin.md",sourceDirName:"guides/07-features",slug:"/guides/features/plugin",permalink:"/doc/v1/guides/features/plugin",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/guides/07-features/plugin.md",tags:[],version:"current",lastUpdatedAt:1652462994,formattedLastUpdatedAt:"5/14/2022",frontMatter:{},sidebar:"guides",previous:{title:"Multiwindow",permalink:"/doc/v1/guides/features/multiwindow"},next:{title:"Splashscreen",permalink:"/doc/v1/guides/features/splashscreen"}},p={},c=[{value:"Using a Plugin",id:"using-a-plugin",level:2},{value:"Writing a Plugin",id:"writing-a-plugin",level:2},{value:"API package",id:"api-package",level:3},{value:"Writing a Plugin",id:"writing-a-plugin-1",level:2},{value:"Conventions",id:"conventions",level:3},{value:"Advanced",id:"advanced",level:3}],d={toc:c};function g(e){var n=e.components,t=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"tauri-plugins"},"Tauri Plugins"),(0,l.kt)("p",null,"Plugins allow you to hook into the Tauri application lifecycle and introduce new commands."),(0,l.kt)("h2",{id:"using-a-plugin"},"Using a Plugin"),(0,l.kt)("p",null,"To use a plugin, just pass the plugin instance to the App's ",(0,l.kt)("inlineCode",{parentName:"p"},"plugin")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n  tauri::Builder::default()\n    .plugin(my_awesome_plugin::init())\n    .run(tauri::generate_context!())\n    .expect("failed to run app");\n}\n')),(0,l.kt)("h2",{id:"writing-a-plugin"},"Writing a Plugin"),(0,l.kt)("p",null,"Plugins are reusable extensions to the Tauri API that solve common problems. They are also a very convenient way to structure your own code base!"),(0,l.kt)("p",null,"If you intend to share your plugin with others, we provide a ready-made template! With the tauri-cli installed just run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tauri plugin init --name awesome\n")),(0,l.kt)("h3",{id:"api-package"},"API package"),(0,l.kt)("p",null,"By default consumers of your plugin can call provided commands like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { invoke } from '@tauri-apps/api'\ninvoke('plugin:awesome|do_something')\n")),(0,l.kt)("p",null,"where ",(0,l.kt)("inlineCode",{parentName:"p"},"awesome")," will be replaced by your plugin name."),(0,l.kt)("p",null,"This isn't very convenient however, so it's common for plugins to provide a so called ",(0,l.kt)("em",{parentName:"p"},"API package"),", a JavaScript package that provides convenient access to your commands."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"An example of this is the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tauri-apps/tauri-plugin-store"},"tauri-plugin-store"),", that provides a convenient class structure to accessing a store.\nYou can scaffold a plugin with attached API package like this:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tauri plugin init --name awesome --api\n")),(0,l.kt)("h2",{id:"writing-a-plugin-1"},"Writing a Plugin"),(0,l.kt)("p",null,"Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"tauri::plugin::Builder")," you can define plugins similar to how you define your app:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"use tauri::{\n  plugin::{Builder, TauriPlugin},\n  Runtime,\n};\n\n// the plugin custom command handlers if you choose to extend the API:\n\n#[tauri::command]\n// this will be accessible with `invoke('plugin:awesome|initialize')`.\n// where `awesome` is the plugin name.\nfn initialize() {}\n\n#[tauri::command]\n// this will be accessible with `invoke('plugin:awesome|do_something')`.\nfn do_something() {}\n\npub fn init<R: Runtime>() -> TauriPlugin<R> {\n  Builder::new(\"awesome\")\n    .invoke_handler(tauri::generate_handler![initialize, do_something])\n    .build()\n}\n")),(0,l.kt)("p",null,"Plugins can setup and maintain state, just like your app can:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"use tauri::{\n  plugin::{Builder, TauriPlugin},\n  AppHandle, Manager, Runtime, State,\n};\n\n#[derive(Default)]\nstruct MyState {}\n\n#[tauri::command]\n// this will be accessible with `invoke('plugin:awesome|do_something')`.\nfn do_something<R: Runtime>(_app: AppHandle<R>, state: State<'_, MyState>) {\n  // you can access `MyState` here!\n}\n\npub fn init<R: Runtime>() -> TauriPlugin<R> {\n  Builder::new(\"awesome\")\n    .invoke_handler(tauri::generate_handler![do_something])\n    .setup(|app_handle| {\n      // setup plugin specific state here\n      app_handle.manage(MyState::default());\n      Ok(())\n    })\n    .build()\n}\n")),(0,l.kt)("h3",{id:"conventions"},"Conventions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The crate exports an ",(0,l.kt)("inlineCode",{parentName:"li"},"init")," method to create the plugin."),(0,l.kt)("li",{parentName:"ul"},"Plugins should have a clear name with ",(0,l.kt)("inlineCode",{parentName:"li"},"tauri-plugin-")," prefix."),(0,l.kt)("li",{parentName:"ul"},"Include ",(0,l.kt)("inlineCode",{parentName:"li"},"tauri-plugin")," keyword in ",(0,l.kt)("inlineCode",{parentName:"li"},"Cargo.toml"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"package.json"),"."),(0,l.kt)("li",{parentName:"ul"},"Document your plugin in English."),(0,l.kt)("li",{parentName:"ul"},"Add an example app showcasing your plugin.")),(0,l.kt)("h3",{id:"advanced"},"Advanced"),(0,l.kt)("p",null,"Instead of relying on the ",(0,l.kt)("inlineCode",{parentName:"p"},"tauri::plugin::TauriPlugin")," struct returned by ",(0,l.kt)("inlineCode",{parentName:"p"},"tauri::plugin::Builder::build"),", you can implement the ",(0,l.kt)("inlineCode",{parentName:"p"},"tauri::plugin::Plugin")," yourself. This allows you to have full control over the associated data."),(0,l.kt)("p",null,"Note that each function on the ",(0,l.kt)("inlineCode",{parentName:"p"},"Plugin")," trait is optional, except the ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"use tauri::{plugin::{Plugin, Result as PluginResult}, Runtime, PageLoadPayload, Window, Invoke, AppHandle};\n\nstruct MyAwesomePlugin<R: Runtime> {\n  invoke_handler: Box<dyn Fn(Invoke<R>) + Send + Sync>,\n  // plugin state, configuration fields\n}\n\n// the plugin custom command handlers if you choose to extend the API.\n#[tauri::command]\n// this will be accessible with `invoke('plugin:awesome|initialize')`.\n// where `awesome` is the plugin name.\nfn initialize() {}\n\n#[tauri::command]\n// this will be accessible with `invoke('plugin:awesome|do_something')`.\nfn do_something() {}\n\nimpl<R: Runtime> MyAwesomePlugin<R> {\n  // you can add configuration fields here,\n  // see https://doc.rust-lang.org/1.0.0/style/ownership/builders.html\n  pub fn new() -> Self {\n    Self {\n      invoke_handler: Box::new(tauri::generate_handler![initialize, do_something]),\n    }\n  }\n}\n\nimpl<R: Runtime> Plugin<R> for MyAwesomePlugin<R> {\n  /// The plugin name. Must be defined and used on the `invoke` calls.\n  fn name(&self) -> &'static str {\n    \"awesome\"\n  }\n\n  /// The JS script to evaluate on initialization.\n  /// Useful when your plugin is accessible through `window`\n  /// or needs to perform a JS task on app initialization\n  /// e.g. \"window.awesomePlugin = { ... the plugin interface }\"\n  fn initialization_script(&self) -> Option<String> {\n    None\n  }\n\n  /// initialize plugin with the config provided on `tauri.conf.json > plugins > $yourPluginName` or the default value.\n  fn initialize(&mut self, app: &AppHandle<R>, config: serde_json::Value) -> PluginResult<()> {\n    Ok(())\n  }\n\n  /// Callback invoked when the Window is created.\n  fn created(&mut self, window: Window<R>) {}\n\n  /// Callback invoked when the webview performs a navigation.\n  fn on_page_load(&mut self, window: Window<R>, payload: PageLoadPayload) {}\n\n  /// Extend the invoke handler.\n  fn extend_api(&mut self, message: Invoke<R>) {\n    (self.invoke_handler)(message)\n  }\n}\n")))}g.isMDXComponent=!0}}]);