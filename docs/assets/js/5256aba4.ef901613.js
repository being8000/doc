"use strict";(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[2393],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,k=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},83218:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={},s=void 0,p={unversionedId:"api/js/modules/mocks",id:"api/js/modules/mocks",title:"mocks",description:"@tauri-apps/api / mocks",source:"@site/docs/api/js/modules/mocks.md",sourceDirName:"api/js/modules",slug:"/api/js/modules/mocks",permalink:"/doc/v1/api/js/modules/mocks",draft:!1,editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/api/js/modules/mocks.md",tags:[],version:"current",lastUpdatedAt:1652246483,formattedLastUpdatedAt:"5/11/2022",frontMatter:{},sidebar:"api",previous:{title:"http",permalink:"/doc/v1/api/js/modules/http"},next:{title:"notification",permalink:"/doc/v1/api/js/modules/notification"}},d={},c=[{value:"Functions",id:"functions",level:2},{value:"clearMocks",id:"clearmocks",level:3},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"mockIPC",id:"mockipc",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"mockWindows",id:"mockwindows",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4}],m={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/v1/api/js/"},"@tauri-apps/api")," / mocks"),(0,i.kt)("h1",{id:"module-mocks"},"Module: mocks"),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"clearmocks"},"clearMocks"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"clearMocks"),"(): ",(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("p",null,"Clears mocked functions/data injected by the other functions in this module.\nWhen using a test runner that doesn't provide a fresh window object for each test, calling this function will reset tauri specific properties."),(0,i.kt)("h1",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { mockWindows, clearMocks } from "@tauri-apps/api/mocks"\n\nafterEach(() => {\n   clearMocks()\n})\n\ntest("mocked windows", () => {\n   mockWindows("main", "second", "third");\n\n   expect(window).toHaveProperty("__TAURI_METADATA__")\n})\n\ntest("no mocked windows", () => {\n   expect(window).not.toHaveProperty("__TAURI_METADATA__")\n})\n')),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/tauri-apps/tauri/blob/c8667f9/tooling/api/src/mocks.ts#L142"},"mocks.ts:142")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"mockipc"},"mockIPC"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"mockIPC"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"cb"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("p",null,"Intercepts all IPC requests with the given mock handler."),(0,i.kt)("p",null,"This function can be used when testing tauri frontend applications or when running the frontend in a Node.js context during static site generation."),(0,i.kt)("h1",{id:"examples"},"Examples"),(0,i.kt)("p",null,"Testing setup using vitest:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { mockIPC, clearMocks } from "@tauri-apps/api/mocks"\nimport { invoke } from "@tauri-apps/api/tauri"\n\nafterEach(() => {\n   clearMocks()\n})\n\ntest("mocked command", () => {\n mockIPC((cmd, args) => {\n  switch (cmd) {\n    case "add":\n      return (args.a as number) + (args.b as number);\n    default:\n      break;\n    }\n });\n\n expect(invoke(\'add\', { a: 12, b: 15 })).resolves.toBe(27);\n})\n')),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"cb")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"cmd"),": ",(0,i.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"args"),": ",(0,i.kt)("inlineCode",{parentName:"td"},"Record"),"<",(0,i.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"unknown"),">",") => ",(0,i.kt)("inlineCode",{parentName:"td"},"any"))))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/tauri-apps/tauri/blob/c8667f9/tooling/api/src/mocks.ts#L40"},"mocks.ts:40")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"mockwindows"},"mockWindows"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"mockWindows"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"current"),", ...",(0,i.kt)("inlineCode",{parentName:"p"},"additionalWindows"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("p",null,"Mocks one or many window labels.\nIn non-tauri context it is required to call this function ",(0,i.kt)("em",{parentName:"p"},"before")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@tauri-apps/api/window")," module."),(0,i.kt)("p",null,"This function only mocks the ",(0,i.kt)("em",{parentName:"p"},"presence")," of windows,\nwindow properties (e.g. width and height) can be mocked like regular IPC calls using the ",(0,i.kt)("inlineCode",{parentName:"p"},"mockIPC")," function."),(0,i.kt)("h1",{id:"examples-1"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { mockWindows } from "@tauri-apps/api/mocks";\nimport { getCurrent } from "@tauri-apps/api/window";\n\nmockWindows("main", "second", "third");\n\nconst win = getCurrent();\n\nwin.label // "main"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { mockWindows } from "@tauri-apps/api/mocks";\n\nmockWindows("main", "second", "third");\n\nmockIPC((cmd, args) => {\n if (cmd === "tauri") {\n   if (\n     args?.__tauriModule === "Window" &&\n     args?.message?.cmd === "manage" &&\n     args?.message?.data?.cmd?.type === "close"\n   ) {\n     console.log(\'closing window!\');\n   }\n }\n});\n\nconst { getCurrent } = await import("@tauri-apps/api/window");\n\nconst win = getCurrent();\nawait win.close(); // this will cause the mocked IPC handler to log to the console.\n')),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"current")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Label of window this JavaScript context is running in.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"...additionalWindows")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Label of additional windows the app has.")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/tauri-apps/tauri/blob/c8667f9/tooling/api/src/mocks.ts#L108"},"mocks.ts:108")))}u.isMDXComponent=!0}}]);